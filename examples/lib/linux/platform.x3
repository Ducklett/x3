import "./syscalls"

module platform 

const stdin:int = 0
const stdout:int = 1
const stderr:int = 2

proc exit(code:int) {
	sys.exit(code)
}

proc write(msg:string) {
	sys.write(stdout,msg,msg.length)
}

proc read(buffer:![]char) -> string {
	var len = sys.read(stdin, buffer, buffer.length)
	return string(buffer, len)
}

proc random() -> uint {
	var value:uint #noinit
	// TODO: pass proper flag?
	sys.getrandom(~>value,sizeof(int),0)
	return value
}

proc sleep(seconds:f64) {
	// assert(seconds >= 0)
	const nanoseconds_in_second:f64 = 10_0000_0000
	var full_seconds = seconds:int
	var full_nanos = (nanoseconds_in_second * (seconds - full_seconds:f64)):s64

	var t = sys.timespec(full_seconds, full_nanos)
	sys.nanosleep(~>t, null)
}

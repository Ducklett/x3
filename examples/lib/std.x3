import "./sys"

module std {
    proc exit[code:int] {
        sys.exit(code);
    }


    proc write[msg:string] {
        sys.write(sys.stdout, msg, msg.length);
    }

    ((TODO: support optional parameters))
    ((TODO: implement something like `#calleespan(conditionText) condition:bool, conditionText:string)` so we can print the condition))
    proc assert[
        #callee span(message) condition:bool,
        message:string,
        #call site' call site:string
    ] {
        if condition { return; }

        write(call site);
        write(" assertion failed: ");
        write(message);
        write("\n");
        exit(1);
    }

    proc read[buffer:![]char] -> int {
        sys.read(sys.stdin, buffer, buffer.length);
    }

    #private
    proc write file text base[filename:cstring, content:string, flags:int, mode: sys.mode_t] {
        ((TODO: support for non-constexpr const declarations))
        ((TODO: error checking))
        var fd = sys.open(filename, flags, mode);
        assert(fd>=0);

        sys.write(fd,content,content.length);

        var error = sys.close(fd);
        assert(error == 0);
    }

    proc write all text[filename:cstring, content:string] {
        const flags = sys.O_CREAT|sys.O_WRONLY;
        const mode = sys.S_IRUSR|sys.S_IWUSR;

        sys.unlink(filename);
        write file text base(filename, content, flags, mode);
    }

    proc append text[filename:cstring, content:string] {
        const flags = sys.O_CREAT|sys.O_WRONLY|sys.O_APPEND;
        const mode = sys.S_IRUSR|sys.S_IWUSR;

        write file text base(filename, content, flags, mode);
    }
}

import "./sys"

module standard {
    proc exit[code:int]
    {
        sys.exit(code)
    }

    proc write[msg:string]
    {
        sys.write(sys.stdout, msg, msg.length)
    }

    proc write char[c:char]
    {
        sys.write(sys.stdout, &c, 1)
    }

    proc write line[msg:string] {
        write(msg)
        write("\n")
    }

    proc assert[
        condition:bool      #callee span(message),
        message:string,
        call site:string    #call site
    ] {
        if condition { return }

        write(call site)
        write(" assertion failed: ")
        write(message)
        write("\n")
        exit(1)
    }

    proc panic[
        message:string,
        call site:string #call site
    ] {
        write(call site)
        write(" PANIC: ")
        write(message)
        write("\n")
        exit(1)
    }

    proc TODO[call site:string #call site']
    {
        write(call site)
        write(" not implemented.\n")
        exit(1)
    }

    proc read[buffer:![]char] -> int
    {
        return sys.read(sys.stdin, buffer, buffer.length)
    }


    proc write file text base[filename:cstring, content:string, flags:int, mode: sys.mode_t] #private
    {
        ((TODO: support for non-constexpr const declarations))
        ((TODO: error checking))
        var fd = sys.open(filename, flags, mode)
        assert(fd>=0)

        sys.write(fd,content,content.length)

        var error = sys.close(fd)
        assert(error == 0)
    }

    proc write all text[filename:cstring, content:string]
    {
        const flags = sys.O_CREAT|sys.O_WRONLY
        const mode = sys.S_IRUSR|sys.S_IWUSR

        sys.unlink(filename)
        write file text base(filename, content, flags, mode)
    }

    proc append text[filename:cstring, content:string]
    {
        const flags = sys.O_CREAT|sys.O_WRONLY|sys.O_APPEND
        const mode = sys.S_IRUSR|sys.S_IWUSR

        write file text base(filename, content, flags, mode)
    }
}

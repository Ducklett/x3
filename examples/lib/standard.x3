import "./sys"

module standard

proc exit(code:int)
{
	sys.exit(code)
}

proc sleep(seconds:f64) {
	assert(seconds >= 0)
	const nanoseconds_in_second:f64 = 10_0000_0000
	var full_seconds = seconds:int
	var full_nanos = (nanoseconds_in_second * (seconds - full_seconds:f64)):s64

	var t = sys.timespec(full_seconds, full_nanos)
	sys.nanosleep(~>t, null)
}

proc write(msg:string)
{
	sys.write(sys.stdout, msg, msg.length)
}

proc write_char(c:char)
{
	sys.write(sys.stdout, ~>c, 1)
}

proc write_number(number:int)
{
	if number == 0 {
		write_char("0")
		return
	}

	if number < 0 {
		write_char("-")
		number = 0 - number
	}

	// find highest decimal_place
	var decimal_place = 1
	while number > decimal_place {
		decimal_place *= 10
	}
	if number / decimal_place == 0 {
		decimal_place /= 10
	}

	// work our way down, printing along the way
	while decimal_place > 0 {
		var digit = number / decimal_place
		write_char("0" + digit)
		number -= digit * decimal_place
		decimal_place /= 10
	}
}

proc write_hex(number:int) {
	write_char("0")
	write_char("x")
	const lut = "0123456789ABCDEF"
	for var i = 60; i >= 0; i-=4 {
		write_char(lut[(number>>i) & 0xF])
	}
}

proc write_line(msg:string) {
	write(msg)
	write("\n")
}

proc strlen(str:cstring) -> int
{
	var len = 0
	while str[len] != 0 { len++ }
	return len
}

proc write_cstring(str:cstring) {
	sys.write(sys.stdout, str, strlen(str))
}

proc assert(
	condition:bool    #callerspan(message),
	message:string,
	callsite:string   #callsite
) {
	if condition { return }

	write(callsite)
	write(" assertion failed: ")
	write(message)
	write("\n")
	exit(1)
}

proc panic(
	message:string,
	callsite:string #callsite
) {
	write(callsite)
	write(" PANIC: ")
	write(message)
	write("\n")
	exit(1)
}

proc trace(
	it:any,
	callsite:string #callsite
) {
	write(callsite)
	write(": ")
	println(it)
}

proc TODO(callsite:string #callsite)
{
	write(callsite)
	write(" not implemented.\n")
	exit(1)
}

// reads into the input buffer from stdin
// returns a string containing the input
proc read(buffer:![]char) -> string
{
	var len = sys.read(sys.stdin, buffer, buffer.length)
	return string(buffer, len)
}


proc write_file_text_base(filename:cstring, content:string, flags:int, mode: sys.mode_t) #private
{
	var fd = sys.open(filename, flags, mode)
	assert(fd>=0)

	sys.write(fd,content,content.length)

	var error = sys.close(fd)
	assert(error == 0)
}

proc write_all_text(filename:cstring, content:string)
{
	const flags = sys.O_CREAT|sys.O_WRONLY
	const mode = sys.S_IRUSR|sys.S_IWUSR

	sys.unlink(filename)
	write_file_text_base(filename, content, flags, mode)
}

proc append_text(filename:cstring, content:string)
{
	const flags = sys.O_CREAT|sys.O_WRONLY|sys.O_APPEND
	const mode = sys.S_IRUSR|sys.S_IWUSR

	write_file_text_base(filename, content, flags, mode)
}

proc strequal(a:string,b:string) {
	if a.length != b.length {
		return false
	}
	each c,i <- a {
		if c != b[i] {
			return false
		}
	}
	return true
}

// TODO: turn type info into tagged union
enum type_tag #bitfield {
	void    = 0,
	int     = 1,
	bool    = 2,
	string  = 3,
	char    = 4,
	pointer = 5,
	array   = 6,
	struct  = 7,
	type    = 8,
	enum    = 9,
	float    = 11,
}

proc print(it:any) {
	// TODO: fix pointer following for nested property access
	var t = it.type

	if t.kind == type_tag.bool {
		var res:bool = <~it.data
		if res {
			write("true")
		} else {
			write("false")
		}
	} else if (t.kind == type_tag.int) {
		// TODO: use take sign info into account
		// TODO: fix '<~it.data:int not casting properly for some reason'
		// d:int = <~it.data works fine
		var d:int = <~it.data
		match t.size {
			8  { write_number(d) }
			4  { write_number(d & 0xFFFF_FFFF) }
			2  { write_number(d & 0xFFFF) }
			1  { write_number(d & 0xFF) }
			else { panic("illegal size") }
		}
	} else if t.kind == type_tag.string {
		write(<~it.data)
	} else if t.kind == type_tag.pointer {
		write("~>")
		print(any(<~it.data, t.data.pointerData.to))
	} else if t.kind == type_tag.array {
		write("[")
		var entries:[]void = <~it.data
		var entryType = t.data.arrayData.of
		var entrySize = entryType.size

		var i = 0
		while(i<entries.length) {
			if (i != 0) { write(", ") }
			var ptr = entries.buffer + (i * entrySize)
			print(any(ptr,entryType))
			i++
		}
		write("]")
	} else if t.kind == type_tag.struct {
		var name = t.name
		if strequal(name,"any") {
			var it:any = <~it.data
			print(it)
			return
		}
		var basePtr = it.data
		var fields = t.data.structData.fields

		write(t.name)
		write("{")
		each field,i <- fields {
			if (i != 0) {
				write(", ")
			}
			var fieldPtr = basePtr + field.offset
			var fieldType = field.type
			write(field.name)
			write("=")
			print(any(fieldPtr, fieldType))
		}
		write("}")
	} else if t.kind == type_tag.enum {
		write(t.name)
		write(".")
		var index:int = <~it.data
		var entries = t.data.enumData.entries
		each entry <- entries {
			if entry.tag != index continue

			var fields = entry.fields
			write(entry.name)
			if fields.length > 0 {
				write("(")
				var basePtr=it.data
				each field,i <- fields {
					if (i != 0) {
						write(", ")
					}
					var fieldPtr = basePtr + field.offset
					var fieldType = field.type
					write(field.name)
					write("=")
					print(any(fieldPtr, fieldType))
				}
				write(")")
			}
			return
		}

		printf("entry not found for value %\n", index)
		exit(1)
	} else {
		write_number(t.kind)
		assert(false, "Unsupported type_tag")
	}
}

proc println(it:any) {
	print(it)
	write("\n")
}

// allows for custom formatting in printf
// e.g. hex/binary numbers, alignment, coloring
struct formatter(run:(any)->void, args:any)

proc printf(fmt:string,...xs:[]any) {
	var j = 0
	each c,i <- fmt {
		if c == "%" {
			var it = xs[j]
			// TODO: allow it.type.name
			var t = it.type
			if strequal(t.name, "formatter") {
				var fmt:formatter = <~it.data
				fmt.run(fmt.args)
			} else {
				print(it)
			}
			
			j++
		} else {
			write_char(c)
		}
	}
}

module format {
	proc hex(it:any) -> formatter {
		return formatter((it:any) {
			var d = it.data
			var t = it.type
			assert((t.kind == 1) || (t.kind == 11)) // int or float
			write_hex(<~d)
		}, it)
	}

	proc bold  (it:any) -> formatter { return formatter((it:any) { printf("\x1B[1m%\x1B[0m", it) }, it) }

	proc black  (it:any) -> formatter { return formatter((it:any) { printf("\x1B[30m%\x1B[0m", it) }, it) }
	proc red    (it:any) -> formatter { return formatter((it:any) { printf("\x1B[31m%\x1B[0m", it) }, it) }
	proc green  (it:any) -> formatter { return formatter((it:any) { printf("\x1B[32m%\x1B[0m", it) }, it) }
	proc yellow (it:any) -> formatter { return formatter((it:any) { printf("\x1B[33m%\x1B[0m", it) }, it) }
	proc blue   (it:any) -> formatter { return formatter((it:any) { printf("\x1B[34m%\x1B[0m", it) }, it) }
	proc magenta(it:any) -> formatter { return formatter((it:any) { printf("\x1B[35m%\x1B[0m", it) }, it) }
	proc cyan   (it:any) -> formatter { return formatter((it:any) { printf("\x1B[36m%\x1B[0m", it) }, it) }
	proc white  (it:any) -> formatter { return formatter((it:any) { printf("\x1B[37m%\x1B[0m", it) }, it) }

	proc bgBlack  (it:any) -> formatter { return formatter((it:any) { printf("\x1B[40m%\x1B[0m", it) }, it) }
	proc bgRed    (it:any) -> formatter { return formatter((it:any) { printf("\x1B[41m%\x1B[0m", it) }, it) }
	proc bgGreen  (it:any) -> formatter { return formatter((it:any) { printf("\x1B[42m%\x1B[0m", it) }, it) }
	proc bgYellow (it:any) -> formatter { return formatter((it:any) { printf("\x1B[43m%\x1B[0m", it) }, it) }
	proc bgBlue   (it:any) -> formatter { return formatter((it:any) { printf("\x1B[44m%\x1B[0m", it) }, it) }
	proc bgMagenta(it:any) -> formatter { return formatter((it:any) { printf("\x1B[45m%\x1B[0m", it) }, it) }
	proc bgCyan   (it:any) -> formatter { return formatter((it:any) { printf("\x1B[46m%\x1B[0m", it) }, it) }
	proc bgWhite  (it:any) -> formatter { return formatter((it:any) { printf("\x1B[47m%\x1B[0m", it) }, it) }

	proc json(it:any) -> formatter {
		proc to_json_internal(it:any,padding:int,use_padding:bool) {
			proc pad(padding:int) {
				for var i = 0; i < padding; i++ {
					write_char(" ") 
				}
			}

			if use_padding {
				pad(padding)
			}

			// TODO: fix pointer following for nested property access
			var t = it.type

			if t.kind == type_tag.bool {
				var res:bool = <~it.data
				if res {
					write("true")
				} else {
					write("false")
				}
			}
			else if t.kind == type_tag.int {
				write_number(<~it.data)
			} else if t.kind == type_tag.string {
				write("\"")
				write(<~it.data)
				write("\"")
			} else if t.kind == type_tag.pointer {
				panic("pointers cannot be serialized")
			} else if t.kind == type_tag.array {
				var entries:[]void = <~it.data
				var entryType = t.data.arrayData.of
				var entrySize = entryType.size
				var is_complex = (entries.length > 12) || ((entryType.kind != type_tag.int) && (entries.length > 1))

				if is_complex {
					var i = 0
					write("[\n")

					while(i<entries.length) {
						var ptr = entries.buffer + (i * entrySize)
						to_json_internal(any(ptr,entryType),padding+4,true)
						if i != (entries.length-1) {
							write(",")
						}
						write("\n")
						i++
					}
					write("]")
				} else {
					var i = 0
					write("[")

					while(i<entries.length) {
						var ptr = entries.buffer + (i * entrySize)
						to_json_internal(any(ptr,entryType),padding,false)
						if i != (entries.length-1) {
							write(", ")
						}
						i++
					}
					write("]")
				}

			} else if t.kind == type_tag.struct {
				if strequal(t.name, "any") {
					var asAny:any = <~it.data
					to_json_internal(asAny,padding-4,true)
					return
				}
				var basePtr = it.data
				var fields = t.data.structData.fields
				// TODO: 'fix is_complex = field.length>4' not working for some reason
				var is_complex = fields.length > 4 //false
				if !is_complex {
					each field <- fields {
						var fieldType = field.type
						if (field.name.length > 12) {
							is_complex = true
							break
						}
						if (fieldType.kind != type_tag.int) {
							is_complex = true
							break
						}
					}
				}

				if is_complex {
					write("{\n")
					each field,i <- fields {
						var fieldPtr = basePtr + field.offset
						var fieldType = field.type
						pad(padding+4)
						write("\"")
						write(field.name)
						write("\"")
						write(": ")
						to_json_internal(any(fieldPtr, fieldType), padding+4,false)
						if (i != (fields.length-1)) {
							write(",\n")
						} else {
							write("\n")
						}
					}
					pad(padding)
					write("}")
				} else {
					write("{")
					each field,i <- fields {
						var fieldPtr = basePtr + field.offset
						var fieldType = field.type
						write("\"")
						write(field.name)
						write("\"")
						write(": ")
						to_json_internal(any(fieldPtr, fieldType), padding,false)
						if (i != (fields.length-1)) {
							write(", ")
						}
					}
					write("}")
				}
			} else if t.kind == type_tag.enum {
				// TODO: add cast so we can just cast(int, <~d)
				var index:int = <~it.data
				write_number(index)
			} else {
				write_number(t.kind)
				panic(": Unsupported type_tag")
			}
		}

		return formatter((it:any) {
			to_json_internal(it,0,false)
		}, it)
	}

	// //   bg   fg
	// //   vvv  vvv
	// // 0bxxxx_xxxx
	// //      |    |
	// //      |    fg flag
	// //      bg flag
	// enum color options #bitfield {
	//     black   = 1,
	//     red     = 3,
	//     green   = 5,
	//     yellow  = 7,
	//     blue    = 9,
	//     magenta = 11,
	//     cyan    = 13,
	//     white   = 15,
	// }

	// proc chalk[it:any,options:color options] -> formatter {
	//     return formatter([it:any] {
	//         // TODO: somehow pass the actual color
	//         // we can't do this currently because all the values die after we return
	//         // some options:
	//         // - the caller allocates everything; this is currently only possible through []any which makes us lose static typing
	//         // - allow formatter to store arbitrary data of fixed size; limited
	//         // - allow formatter to store arbitrary data of any size; hard
	//         var color = color options.yellow
	//         var useColor = color&1
	//         if useColor {
	//             var colorCode = color >> 1 & 0b111
	//             printf("\x1B[0;3%m%\x1B[0m",colorCode, it)
	//         } else {
	//             printf("%",it)
	//         }
	//     }, it)
	// }
}

proc parse_int(s:string) -> int {
	var num = 0
	each c <- s {
		// TODO: get precedence working
		if (c < "0") || (c > "9") break
		num = (num * 10) + (c - "0")
	}
	return num
}

proc random_range(from:int,to:int) -> int
{
	var value:int #noinit
	// TODO: pass proper flag?
	sys.getrandom(~>value,sizeof(int),0)

	// TODO: make unsigned int work and remove this
	if value < 0 { value = -value }

	return (value % (to-from)) + from
}

module tui {
	proc clear() {
		// goto 0,0; clear
		write("\x1B[H\x1B[J")
	}

	proc cursor_to(x:int,y:int) {
		write("\x1B[")
		write_number(y+1)
		write(";")
		write_number(x+1)
		write("H")
	}

	module color {
		const black = "\x1B[0;30m"
		const red = "\x1B[0;31m"
		const green = "\x1B[0;32m"
		const yellow = "\x1B[0;33m"
		const blue = "\x1B[0;34m"
		const magenta = "\x1B[0;35m"
		const cyan = "\x1B[0;36m"
		const white = "\x1B[0;37m"
		const reset = "\x1B[0m"
	}
}

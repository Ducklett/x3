import "./lib/standard" use standard

proc main {
	play_snake()
}

// a basic snake game
// works best with unbuffered inputs but-
// we can't control that yet.
// for now the `make snake` is used to start the game
proc play_snake {
	var termState = sys.fcntl(stdin, sys.F_GETFL,0)
	sys.fcntl(stdin, sys.F_SETFL, termState | sys.O_NONBLOCK)

	const board_size = 16
	const board_area = board_size * board_size

	var apple:int #noinit
	// TODO: constant folding for array size (board_size * board_size)
	var snake:[256]int  #noinit
	var board:[256]char #noinit

	each _,i <- board { board[i] = "_" }

	var score = 0
	var index = 0

	var key:[2]char #noinit // NOTE: it's 2 characters because otherwise it will buffer and return the buffered character

	proc random_position() -> int { return random_range(0,board_area) }

	tui.clear()

	snake[index] = board_area / 2 + (board_size / 2)
	apple = 40 //random_position()

	board[apple] = "*"
	board[snake[index]] = "#"

	enum direction { up, down, left, right }
	var dir = direction.up

	while true {
		tui.cursor_to(0, board_size+1)
		sleep(.2)
		read(key)

		match key[0] {
			"w"    dir = direction.up
			"a"    dir = direction.left
			"s"    dir = direction.down
			"d"    dir = direction.right
		}

		var prev = snake[index]
		index = (index + 1) % board_area

		match dir {
			up {
				if prev < board_size  break
				snake[index] = prev - board_size
			}
			left {
				if prev % board_size == 0  break
				snake[index] = prev - 1
			}
			down {
				if prev + board_size >= board_area  break
				snake[index] = prev + board_size
			}
			right {
				if (prev+1) % board_size == 0  break
				snake[index] = prev + 1
			}
		}

		// self collision
		if board[snake[index]] == "#" break

		if snake[index] == apple {
			score++
			// TODO: fix random giving us broken numbers
			// TODO: fix number printer suppoedly printing them wrong
			// TODO: fix array access for these broken numbers?

			// prng for now
			apple = apple + 37 * 45839 % board_area //random position()
		}

		var toRemove = index - (score + 1) + board_area % board_area
		board[snake[toRemove]] = "_"
		board[snake[index]] = "#"

		board[apple] = "*"

		tui.cursor_to(0,0)
		each y <- board_size {
			each x <- board_size {
				write_char(board[x+(y*board_size)])
			}
			tui.cursor_to(0,y+1)
		}

		tui.cursor_to(0, board_size+1)
		print(apple)
	}

	tui.cursor_to(0, board_size+1)
	write("Game over!\n")

	// grab input for a little bit longer so-
	// we don't spam random keys into the console on game over
	sleep(1)
	read(key)

	sys.fcntl(stdin, sys.F_SETFL, termState)

}

import "./lib/standard" use standard

enum action {
	idle,
	move(x:int,y:int),
	heal(amount:int),
}

enum type(name:string,size:int) {
	number(signed:bool),
	pointer(to:~>type),
}

proc print_action(action:action) {
	match action {
		idle { printf("%\n","idle") }
		move { printf("move(%, %)\n",it.x,it.y) }
		heal { printf("heal(%)\n",it.amount) }
	}
}

proc main {
	var a = action.idle
	var b = action.move(10,20)
	var c = action.heal(48)

	println(a)
	println(b)
	println(c)

	if c == heal {
		printf("heal %!\n",c.amount)
	} else {
		write_line("It's not heal")
	}

	assert(b==move, "b is a move")

	write_number(b.x)
	write(", ")
	write_number(b.y)
	write("\n")

	b.x=45
	b.y=68

	print_action(a)
	print_action(b)
	print_action(c)

	var i  = type.number (name="int",     size=8, signed=true)
	var u  = type.number (name="uint",    size=8, signed=false)
	var pi = type.pointer(name="pointer", size=8, to=~>i)
	var pu = type.pointer(name="pointer", size=8, to=~>u)

	printf("%: %\n", i.name, i.size)
	printf("%: %\n", u.name, u.size)
	printf("%: %\n", pi.name, pi.size)
	printf("%: %\n", pu.name, pu.size)

	// write_line("match:")
	// match c {
	//     red     { write_line("red") }
	//     green   { write_line("green") }
	//     blue    { write_line("blue") }
	// }
	// write_line("-----")
}

	// TODO: fix foo(color.red,"bob",7) not working unless enum already emitted type info

	// // TODO: make print work with string literals
	// write_line("--------")
	// println(839)
	// println(183)
	// println(1)
	// println(0)

import "./lib/standard" use standard

struct point[x:int,y:int]
struct person[name:string,age:int,gender:string]

struct any [
    data:->void,
    'type:->'type info'
]

proc write type[t:->'type info'] {
    const tag_void    = 0
    const tag_int     = 1
    const tag_bool    = 2
    const tag_string  = 3
    const tag_char    = 4
    const tag_pointer = 5
    const tag_array   = 6
    const tag_struct  = 7
    const tag_type    = 8

    if t.kind == tag_struct {
        write ("struct ")
    }

    // write number(t.size)
    // write("::")
    write(t.name)

    if t.kind == tag_int {
        write("(")
        if t.data.intData.signed {
            write("signed")
        } else {
            write("unsigned")
        }
        write(")")
    } else if t.kind == tag_pointer {
        write("<")
        write type(t.data.pointerData.to)
        write(">")
    } else if t.kind == tag_array {
        write("[")
        if (t.data.arrayData.count > 0) {
            write number(t.data.arrayData.count)
        }
        write("]")
        write type(t.data.arrayData.of)
    } else if t.kind == tag_struct {
        write(" {\n")
        // TODO: property access from array (foo[0].bar)
        // TODO: allow property in each loop
        var fields = t.data.structData.fields

        each field :  fields {
            write("  ")
            write number(field.offset)
            write("->")
            write(field.name)
            write(":")
            write type(field.'type')
            write("\n")
        }
        write("}")
    }
}

proc print[it:any] {
    // TODO: make an enum out of this 
    const tag_void    = 0
    const tag_int     = 1
    const tag_bool    = 2
    const tag_string  = 3
    const tag_char    = 4
    const tag_pointer = 5
    const tag_array   = 6
    const tag_struct  = 7
    const tag_type    = 8

    var d = it.data
    // TODO: fix pointer following for nested property access
    var t = it.'type

    if t.kind == tag_int {
        write number(<-d)
    } else if t.kind == tag_string {
        // TODO: escaped quotes
        write("'")
        write(<-d)
        write("'")
    } else if t.kind == tag_pointer {
        write("->")
        print(any(<-d, t.data.pointerData.to))
    } else if t.kind == tag_array {
        write("[")
        var entries:[]void = <-d
        var entryType = t.data.arrayData.of
        var entrySize = entryType.size

        var i = 0
        while(i<entries.length) {
            if (i != 0) { write(", ") }
            var ptr = entries.buffer + (i * entrySize)
            print(any(ptr,entryType))
            i++
        }
        write("]")
    } else if t.kind == tag_struct {
        var basePtr = d
        var fields = t.data.structData.fields

        write(t.name)
        write("{ ")
        each field,i : fields {
            if (i != 0) {
                write(", ")
            }
            var fieldPtr = basePtr + field.offset
            var fieldType = field.'type'
            write(field.name)
            write("=")
            print(any(fieldPtr, fieldType))
        }
        write(" }")
    } else {
        write number(t.kind)
        assert(false, "Unsupported type tag")
    }
}

proc println[it:any] {
    print(it)
    write("\n")
}

    // TODO: fix const being broken

    // what's broken
    // - .data section consts just assume everything is a qword currently; firgure out how to switch to other sizes so we can properly do bools and chars
    // write type(typeof(str)) write("\n")
    // write type(typeof(num)) write("\n")
    // write type(typeof(sptr)) write("\n")
    // write type(typeof(nptr)) write("\n")
    // write type(typeof(uptr)) write("\n")
    // write type(typeof(num list)) write("\n")
    // write type(typeof(str list)) write("\n")
    // write type(typeof(p)) write("\n")
    // write type(typeof(me)) write("\n")

proc main {
    var str = "hello rtti"
    var num = -42
    var unum:u64 = 20
    var sptr = ->str
    var nptr = ->num
    var uptr = ->unum
    var num list = [10,20,30]
    var str list = ["foo","bar","baz"]
    var p = point(32,45)
    var me = person("ivy", 23, "male")

    println(any(->num,typeof(num)))
    println(any(->str,typeof(str)))
    println(any(->sptr,typeof(sptr)))
    println(any(->nptr,typeof(nptr)))
    println(any(->uptr,typeof(uptr)))
    println(any(->num list,typeof(num list)))
    println(any(->str list,typeof(str list)))
    println(any(->p,typeof(p)))
    println(any(->me,typeof(me)))
    write line("私は猫がラブ😭🐾")
}

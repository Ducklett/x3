import "./lib/standard" use standard

// struct point[x:int,y:int]
// struct person[name:string,age:int,gender:string]
// struct complex[entity:person,pos:point]

proc write_type(t:~>type_info) {
	if t.kind == type_tag.struct {
		write("struct ")
	}

	// write_number(t.size)
	// write("::")
	write(t.name)

	if t.kind == type_tag.int {
		write("(")
		if t.data.intData.signed {
			write("signed")
		} else {
			write("unsigned")
		}
		write(")")
	} else if t.kind == type_tag.pointer {
		write("<")
		write_type(t.data.pointerData.to)
		write(">")
	} else if t.kind == type_tag.array {
		write("[")
		if (t.data.arrayData.count > 0) {
			write_number(t.data.arrayData.count)
		}
		write("]")
		write_type(t.data.arrayData.of)
	} else if t.kind == type_tag.struct {
		write(" {\n")
		// TODO: property access from array (foo[0].bar)
		// TODO: allow property in each loop
		var fields = t.data.structData.fields

		each field <- fields {
			write("  ")
			write_number(field.offset)
			write("~>")
			write(field.name)
			write(":")
			write_type(field.type)
			write("\n")
		}
		write("}")
	}
}

// TODO: get this working in proc scope
// TODO: property access in use statement (use foo.bar.baz)
use tui
use format

proc main {
	printf("% % % %\n", magenta("var"), red("x"), cyan("="), yellow(10))
	printf("some nums: %, %\n", yellow(10), yellow(20))
	printf("its % (%age %)\n", bgGreen(black("ivy")), color.cyan, bold(23))

	printf("hex: %\n", format.hex(0xABC99F00BAB00))
	struct vec3(x:int,y:int,z:int)
	var mixed_array = ["hey gamers", 10, true, false, vec3(1,2,3)]
	trace(mixed_array)
	println("---")
	each x <- mixed_array {
		println(x)
	}

	printf("%\n", format.json(mixed_array))
	printf("%\n", format.json(vec3(2,3,4)))

	struct complex1(x:int,y:int,z:int,w:int,v:int)
	struct complex2(name:string,age:int)
	printf("%\n", format.json(complex1(1,2,3,4,5)))
	printf("%\n", format.json(complex2(name="Ivy", age=23)))

	// var str = "hello rtti"
	// var num = -42
	// var unum:u64 = 20
	// var sptr = ~>str
	// var nptr = ~>num
	// var uptr = ~>unum
	// var num list = [10,20,30]
	// var str list = ["foo","bar","baz"]
	// var p = point(32,45)
	// var me = person("ivy", 23, "male")
	// var c = complex(me,p)

	// // TODO: fix const being broken

	// // what's broken
	// // - .data section consts just assume everything is a qword currently; firgure out how to switch to other sizes so we can properly do bools and chars
	// write type(typeof(str)) write("\n")
	// write type(typeof(num)) write("\n")
	// write type(typeof(sptr)) write("\n")
	// write type(typeof(nptr)) write("\n")
	// write type(typeof(uptr)) write("\n")
	// write type(typeof(num list)) write("\n")
	// write type(typeof(str list)) write("\n")
	// write type(typeof(p)) write("\n")
	// write type(typeof(me)) write("\n")

	// println(num)
	// println(str)
	// println(sptr)
	// println(nptr)
	// println(uptr)
	// println(num list)
	// println(str list)
	// println(p)
	// println(me)

	// write_line("json gang:")
	// to json(num)
	// to json(str)
	// to json(num list)
	// to json(str list)
	// to json(p)
	// to json(me)
	// to json(c)
	// write_line("ÁßÅ„ÅØÁå´„Åå„É©„Éñüò≠üêæ")
}
